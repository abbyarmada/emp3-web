{
  "version": 3,
  "file": "ozpIwc.timer.js",
  "sources": [
    "src/js/worker/timerThrottleUnlock.js",
    "src/js/worker/timerThrottleUnlockRunner.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACnEA;AACA;AACA;AACA,uD",
  "sourcesContent": [
    "var ozpIwc = ozpIwc || {};\nozpIwc.worker = ozpIwc.worker || {};\n/**\n * Various scripts loaded into webWorkers to enhance the IWCs performance\n * @module ozpIwc\n * @submodule ozpIwc.worker\n */\n\n/**\n * A webWorker to mock timeouts for IWC Client users. When browser tabs are inactive, timers are raised to a minimum of\n * 1 second. This will prevent that so that IWC Actions are not throttled. Loaded via a Blob, or through a\n * worker-runnable script ozpIwc.timer.js.\n *\n * Not intended to be ran in the IWC code directly, this is opened in a separate web worker.\n * Inspiration from MIT Licensed  https://github.com/turuslan/HackTimer.\n *\n * @namespace ozpIwc.worker\n * @method timerThrottleUnlock\n */\nozpIwc.worker.timerThrottleUnlock = function () {\n    var timerRegistrations = {};\n\n\n    self.addEventListener('connect', function (evt) {\n        var port = evt.ports[0];\n\n        port.addEventListener('message', function (evt) {\n            console.log(evt);\n            evt.data = evt.data || {};\n            var timer = evt.data;\n\n            // silently give up if not formatted right\n            if (!timer.hasOwnProperty(\"id\") || !timer.type) {\n                return;\n            }\n\n            timer.time = timer.time || 0;\n\n            //Take all requested timer types and instantiate them in the worker where inactive limits do not apply.\n            switch (timer.type) {\n                case \"setTimeout\":\n                    timerRegistrations[timer.id] = setTimeout(function () {\n                        port.postMessage(timer);\n                        timerRegistrations[timer.id] = null;\n                    }, timer.time);\n                    break;\n\n                case \"clearTimeout\":\n                    self.clearTimeout(timerRegistrations[timer.id]);\n                    timerRegistrations[timer.id] = null;\n                    break;\n\n                case \"setInterval\":\n                    timerRegistrations[timer.id] = self.setInterval(function () {\n                        port.postMessage(timer);\n                    }, timer.time);\n                    break;\n\n                case \"clearInterval\":\n                    self.clearInterval(timerRegistrations[timer.id]);\n                    timerRegistrations[timer.id] = null;\n                    break;\n            }\n        }, false);\n        port.start();\n\n    })\n};\n",
    "ozpIwc = ozpIwc || {};\nozpIwc.worker = ozpIwc.worker || {};\n\n(function () {ozpIwc.worker.timerThrottleUnlock();}());"
  ]
}